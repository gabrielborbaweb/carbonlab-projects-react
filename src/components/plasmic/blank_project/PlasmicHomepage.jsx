// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gsgSHLmWb1QSgLbNnKk81t
// Component: I1gQ4BA44ABJ
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: l4b1ou-zy-A4/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: gsgSHLmWb1QSgLbNnKk81t/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: I1gQ4BA44ABJ/css
import mockupPeriscopepngDgkm3Z6S0 from "./images/mockupPeriscopepng.png"; // plasmic-import: Dgkm3Z6s0/picture

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"projects"}
          data-plasmic-override={overrides.projects}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.projects
          )}
        >
          <div
            data-plasmic-name={"sectionPeriscope"}
            data-plasmic-override={overrides.sectionPeriscope}
            className={classNames(defaultcss.all, sty.sectionPeriscope)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(defaultcss.all, sty.container)}
            >
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(defaultcss.all, sty.columns)}
              >
                <div className={classNames(defaultcss.all, sty.column__uJuc)}>
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      defaultcss.h2,
                      defaultcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {"Periscope"}
                  </h2>

                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      defaultcss.h3,
                      defaultcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {"WordPress"}
                  </h3>
                </div>

                <div className={classNames(defaultcss.all, sty.column___5Vd70)}>
                  <img
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(defaultcss.img, sty.img)}
                    height={1799}
                    role={"img"}
                    src={mockupPeriscopepngDgkm3Z6S0}
                    width={2096}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  projects: [
    "projects",
    "sectionPeriscope",
    "container",
    "columns",
    "h2",
    "h3",
    "img"
  ],

  sectionPeriscope: [
    "sectionPeriscope",
    "container",
    "columns",
    "h2",
    "h3",
    "img"
  ],

  container: ["container", "columns", "h2", "h3", "img"],
  columns: ["columns", "h2", "h3", "img"],
  h2: ["h2"],
  h3: ["h3"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "projects") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("projects"),
  {
    // Helper components rendering sub-elements
    sectionPeriscope: makeNodeComponent("sectionPeriscope"),
    container: makeNodeComponent("container"),
    columns: makeNodeComponent("columns"),
    h2: makeNodeComponent("h2"),
    h3: makeNodeComponent("h3"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
